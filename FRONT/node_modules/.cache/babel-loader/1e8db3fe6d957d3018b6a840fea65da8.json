{"ast":null,"code":"var _jsxFileName = \"/Users/edwingg/Documents/prueba/chat_challenge/FRONT/src/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery // useSubscription,\n// useMutation,\n, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache()\n});\nconst getMessages = gql`\n  query {\n  messages {\n    id\n    content\n    user\n  }\n}\n`;\n\nconst Messages = ({\n  user\n}) => {\n  _s();\n\n  const {\n    data\n  } = useQuery(getMessages);\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data.messages.map(({\n      id,\n      user: messageUser,\n      content\n    }) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: user === messageUser ? \"flex-end\" : \"flex-start\",\n        paddingBottom: \"1em\"\n      },\n      children: [user !== messageUser && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 50,\n          width: 50,\n          marginRight: \"0.5em\",\n          border: \"2px solid #e5e6ea\",\n          borderRadius: 25,\n          textAlign: \"center\",\n          fontSize: \"18pt\",\n          paddingTop: 5\n        },\n        children: messageUser.slice(0, 2).toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: user === messageUser ? \"blue\" : \"#e5e6ea\",\n          color: user === messageUser ? \"white\" : \"black\",\n          padding: \"1em\",\n          borderRadius: \"1em\",\n          maxWidth: \"60%\"\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n\n_s(Messages, \"JtionF1PqWN50DPWu724eJIU2SM=\", false, function () {\n  return [useQuery];\n});\n\n_c = Messages;\n\nconst Chat = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"content is-justify-content-flex-end\",\n    style: {\n      background: 'red',\n      width: '70%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Messages, {\n      user: \"Jack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Chat;\n\nconst provider = () => {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\nexport default provider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Chat\");","map":{"version":3,"sources":["/Users/edwingg/Documents/prueba/chat_challenge/FRONT/src/Chat.js"],"names":["React","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","client","uri","cache","getMessages","Messages","user","data","messages","map","id","messageUser","content","display","justifyContent","paddingBottom","height","width","marginRight","border","borderRadius","textAlign","fontSize","paddingTop","slice","toUpperCase","background","color","padding","maxWidth","Chat","provider"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,CAKE;AACA;AANF,EAOEC,GAPF,QAQO,gBARP;;;AAUA,MAAMC,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE,wBADyB;AAE9BC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAMO,WAAW,GAAGJ,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,MAAMK,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAWR,QAAQ,CAACK,WAAD,CAAzB;;AACA,MAAI,CAACG,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,sBACE;AAAA,cACGA,IAAI,CAACC,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,MAAAA,EAAF;AAAMJ,MAAAA,IAAI,EAAEK,WAAZ;AAAyBC,MAAAA;AAAzB,KAAD,kBACjB;AAEE,MAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,cAAc,EAAER,IAAI,KAAKK,WAAT,GAAuB,UAAvB,GAAoC,YAF/C;AAGLI,QAAAA,aAAa,EAAE;AAHV,OAFT;AAAA,iBAQGT,IAAI,KAAKK,WAAT,iBACC;AACE,QAAA,KAAK,EAAE;AACLK,UAAAA,MAAM,EAAE,EADH;AAELC,UAAAA,KAAK,EAAE,EAFF;AAGLC,UAAAA,WAAW,EAAE,OAHR;AAILC,UAAAA,MAAM,EAAE,mBAJH;AAKLC,UAAAA,YAAY,EAAE,EALT;AAMLC,UAAAA,SAAS,EAAE,QANN;AAOLC,UAAAA,QAAQ,EAAE,MAPL;AAQLC,UAAAA,UAAU,EAAE;AARP,SADT;AAAA,kBAYGZ,WAAW,CAACa,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,EAAwBC,WAAxB;AAZH;AAAA;AAAA;AAAA;AAAA,cATJ,eAwBE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAEpB,IAAI,KAAKK,WAAT,GAAuB,MAAvB,GAAgC,SADvC;AAELgB,UAAAA,KAAK,EAAErB,IAAI,KAAKK,WAAT,GAAuB,OAAvB,GAAiC,OAFnC;AAGLiB,UAAAA,OAAO,EAAE,KAHJ;AAILR,UAAAA,YAAY,EAAE,KAJT;AAKLS,UAAAA,QAAQ,EAAE;AALL,SADT;AAAA,kBASGjB;AATH;AAAA;AAAA;AAAA;AAAA,cAxBF;AAAA,OACOF,EADP;AAAA;AAAA;AAAA;AAAA,YADD;AADH,mBADF;AA0CD,CA/CD;;GAAML,Q;UACaN,Q;;;KADbM,Q;;AAiDN,MAAMyB,IAAI,GAAG,MAAM;AACjB,sBACE;AAAK,IAAA,KAAK,EAAC,qCAAX;AAAiD,IAAA,KAAK,EAAE;AAAEJ,MAAAA,UAAU,EAAE,KAAd;AAAqBT,MAAAA,KAAK,EAAE;AAA5B,KAAxD;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;MAAMa,I;;AAQN,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAE9B,MAAxB;AAAA,2BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQA,eAAe8B,QAAf","sourcesContent":["import React from 'react'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  // useSubscription,\n  // useMutation,\n  gql\n} from '@apollo/client'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache()\n})\n\nconst getMessages = gql`\n  query {\n  messages {\n    id\n    content\n    user\n  }\n}\n`\n\nconst Messages = ({ user }) => {\n  const { data } = useQuery(getMessages)\n  if (!data) {\n    return null\n  }\n  return (\n    <>\n      {data.messages.map(({ id, user: messageUser, content }) => (\n        <div\n          key={id}\n          style={{\n            display: \"flex\",\n            justifyContent: user === messageUser ? \"flex-end\" : \"flex-start\",\n            paddingBottom: \"1em\",\n          }}\n        >\n          {user !== messageUser && (\n            <div\n              style={{\n                height: 50,\n                width: 50,\n                marginRight: \"0.5em\",\n                border: \"2px solid #e5e6ea\",\n                borderRadius: 25,\n                textAlign: \"center\",\n                fontSize: \"18pt\",\n                paddingTop: 5,\n              }}\n            >\n              {messageUser.slice(0, 2).toUpperCase()}\n            </div>\n          )}\n          <div\n            style={{\n              background: user === messageUser ? \"blue\" : \"#e5e6ea\",\n              color: user === messageUser ? \"white\" : \"black\",\n              padding: \"1em\",\n              borderRadius: \"1em\",\n              maxWidth: \"60%\",\n            }}\n          >\n            {content}\n          </div>\n        </div>\n      ))}\n    </>\n  )\n}\n\nconst Chat = () => {\n  return (\n    <div class='content is-justify-content-flex-end' style={{ background: 'red', width: '70%' }}>\n      <Messages user='Jack' />\n    </div>\n  )\n}\n\nconst provider = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Chat />\n    </ApolloProvider>\n  )\n}\n\nexport default provider\n"]},"metadata":{},"sourceType":"module"}